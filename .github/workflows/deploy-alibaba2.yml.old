name: Deploy to Alibaba (artifact)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-alibaba-artifact
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install & Build on runner
        run: |
          set -euxo pipefail
          npm ci --no-audit --no-fund
          npm run build

          rm -rf deploy_artifact
          mkdir -p deploy_artifact
          # в артефакт кладём только то, что нужно в runtime
          cp -r dist package.json package-lock.json deploy_artifact/
          # ВАЖНО: .env НЕ кладём (он хранится на сервере)

      - name: Copy artifact to server (as files)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.ALI_DEPLOY_HOST }}
          username: ${{ secrets.ALI_DEPLOY_USER }}
          key: ${{ secrets.ALI_DEPLOY_SSH_KEY }}
          passphrase: ${{ secrets.ALI_DEPLOY_SSH_PASSPHRASE }}
          port: 22
          source: "deploy_artifact/*"
          target: "/tmp/deploy_artifact"
          rm: true

      - name: Release artifact on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.ALI_DEPLOY_HOST }}
          username: ${{ secrets.ALI_DEPLOY_USER }}
          key: ${{ secrets.ALI_DEPLOY_SSH_KEY }}
          passphrase: ${{ secrets.ALI_DEPLOY_SSH_PASSPHRASE }}
          port: 22
          command_timeout: 45m
          script: |
            set -euxo pipefail
            SHA="${GITHUB_SHA:-unknown}"

            # swap (1 раз создаст, потом будет просто использоваться)
            if [ ! -f /swapfile ]; then
              sudo fallocate -l 2G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=2048
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
              sudo swapon -a
            fi

            sudo -u myapp SHA="$SHA" bash -s <<'REMOTE'
            set -euxo pipefail
            SRC="/tmp/deploy_artifact"
            DEST="/srv/myapp/repo"

            # найдём корень артефакта с package.json
            if [ -f "$SRC/package.json" ]; then
              SRC_USE="$SRC"
            else
              SRC_USE="$(find "$SRC" -maxdepth 2 -type f -name package.json -printf '%h\n' -quit || true)"
              [ -n "$SRC_USE" ] || { echo "package.json не найден в $SRC"; exit 1; }
            fi
            echo "SRC_USE=$SRC_USE"

            mkdir -p "$DEST"
            cd "$DEST"

            # резервная копия предыдущей версии
            mkdir -p ../releases
            ts="$(date -u +%Y%m%d%H%M%S)"
            if [ -d dist ] || [ -f package.json ]; then
              tar -czf "../releases/backup-$ts.tgz" dist package*.json .env* 2>/dev/null || true
            fi

            # ВАЖНО: .env* сохраняем, не удаляем
            rsync -a --delete \
              --exclude '.env*' \
              "$SRC_USE"/ "$DEST"/

            # Проверим, что .env остался (и не пустой)
            [ -s .env ] || { echo ".env отсутствует или пуст — прерываю деплой"; exit 1; }
            # Подстрахуемся от CRLF
            sed -i 's/\r$//' .env

            # ставим прод-зависимости
            if [ -f package-lock.json ]; then
              npm ci --omit=dev --no-audit --no-fund
            else
              npm install --omit=dev --no-audit --no-fund
            fi

            echo "sha=$SHA time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" > .deploy_info

            if pm2 describe myapp-api >/dev/null 2>&1; then
              pm2 restart myapp-api --update-env
            else
              # Явно стартуем dist/main.js, чтобы не зависеть от npm scripts
              pm2 start /usr/bin/node --name myapp-api --time -- dist/main.js
            fi
            pm2 save

            echo "ALIBABA ARTIFACT DEPLOYED $(cat .deploy_info)"
            REMOTE

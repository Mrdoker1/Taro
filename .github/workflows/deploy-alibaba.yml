name: Deploy to Alibaba (artifact)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-alibaba-artifact
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install & Build on runner
        run: |
          set -euxo pipefail
          npm ci --no-audit --no-fund
          npm run build

          # Собираем минимальный артефакт для рантайма
          rm -rf deploy_artifact
          mkdir -p deploy_artifact
          cp -r dist package.json package-lock.json deploy_artifact/
          # Если нужно передавать .env из репо — раскомментируй:
          # cp -r .env* deploy_artifact/ 2>/dev/null || true

      - name: Copy artifact to server (as files, not as .tgz)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.ALI_DEPLOY_HOST }}
          username: ${{ secrets.ALI_DEPLOY_USER }}
          key: ${{ secrets.ALI_DEPLOY_SSH_KEY }}
          # Если ключ без пароля — удали строку ниже:
          passphrase: ${{ secrets.ALI_DEPLOY_SSH_PASSPHRASE }}
          port: 22
          source: "deploy_artifact/*"   # <— передаём содержимое каталога
          target: "/tmp/deploy_artifact"
          rm: true                     # <— очищаем target на сервере

      - name: Release artifact on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.ALI_DEPLOY_HOST }}
          username: ${{ secrets.ALI_DEPLOY_USER }}
          key: ${{ secrets.ALI_DEPLOY_SSH_KEY }}
          # Если ключ без пароля — удали строку ниже:
          passphrase: ${{ secrets.ALI_DEPLOY_SSH_PASSPHRASE }}
          port: 22
          command_timeout: 45m
          script: |
            set -euxo pipefail

            # 1) swap для слабого инстанса
            if [ ! -f /swapfile ]; then
              sudo fallocate -l 2G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=2048
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
              sudo swapon -a
            fi

            # 2) Разворачиваем артефакт как myapp; пробрасываем GITHUB_SHA внутрь
            sudo -u myapp GITHUB_SHA="${GITHUB_SHA}" bash -s <<REMOTE
            set -euxo pipefail

            SRC="/tmp/deploy_artifact"
            DEST="/srv/myapp/repo"

            echo "== whoami: \$(whoami)"
            echo "== ls -la /tmp =="
            ls -la /tmp || true
            echo "== ls -la \$SRC =="
            ls -la "\$SRC" || true
            command -v tree >/dev/null 2>&1 && tree -L 2 "\$SRC" || true

            # Иногда scp-action создаёт вложенную папку — найдём package.json
            if [ -f "\$SRC/package.json" ]; then
              SRC_USE="\$SRC"
            else
              SRC_USE="\$(find "\$SRC" -maxdepth 2 -type f -name package.json -printf '%h\n' -quit || true)"
              if [ -z "\$SRC_USE" ]; then
                echo "package.json не найден в \$SRC (или на глубине 2). Содержимое:"
                find "\$SRC" -maxdepth 2 -print
                exit 1
              fi
            fi
            echo "Используем источник: \$SRC_USE"

            # Готовим директорию назначения
            mkdir -p "\$DEST"
            cd "\$DEST"

            # 3) Бэкап предыдущей версии
            mkdir -p ../releases
            ts="\$(date -u +%Y%m%d%H%M%S)"
            if [ -d dist ] || [ -f package.json ]; then
              tar -czf "../releases/backup-\$ts.tgz" dist package*.json .env* 2>/dev/null || true
            fi

            # 4) Перекладываем файлы
            # Если нужно сохранять .env на сервере — исключай их:
            # rsync -a --delete --exclude '.env*' "\$SRC_USE"/ "\$DEST"/
            rsync -a --delete "\$SRC_USE"/ "\$DEST"/

            # 5) Прод-зависимости (если нужны для runtime)
            if [ -f package-lock.json ]; then
              npm ci --omit=dev --no-audit --no-fund
            else
              npm install --omit=dev --no-audit --no-fund
            fi

            # 6) Метка деплоя — теперь \$GITHUB_SHA доступен (мы его пробросили)
            echo "sha=\$GITHUB_SHA time=\$(date -u +%Y-%m-%dT%H:%M:%SZ)" > .deploy_info

            # 7) PM2: рестарт/старт
            if pm2 describe myapp-api >/dev/null 2>&1; then
              pm2 restart myapp-api --update-env
            else
              pm2 start "npm -- start" --name myapp-api --time
            fi
            pm2 save

            echo "ALIBABA ARTIFACT DEPLOYED \$(cat .deploy_info)"
            REMOTE

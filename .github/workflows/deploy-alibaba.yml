name: Deploy to Alibaba (artifact)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-alibaba-artifact
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install & Build on runner
        run: |
          set -euxo pipefail
          npm ci --no-audit --no-fund
          npm run build
          # собрать минимальный артефакт
          mkdir -p deploy_artifact
          cp -r package*.json .env* dist deploy_artifact/ 2>/dev/null || true
          # если нужны статические файлы/папки — добавь сюда
          tar -C deploy_artifact -czf artifact.tgz .

      - name: Copy artifact to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.ALI_DEPLOY_HOST }}
          username: ${{ secrets.ALI_DEPLOY_USER }}
          key: ${{ secrets.ALI_DEPLOY_SSH_KEY }}
          # если ключ без пароля — уберите строку ниже:
          passphrase: ${{ secrets.ALI_DEPLOY_SSH_PASSPHRASE }}
          source: "artifact.tgz"
          target: "/tmp/artifact.tgz"

      - name: Release artifact on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.ALI_DEPLOY_HOST }}
          username: ${{ secrets.ALI_DEPLOY_USER }}
          key: ${{ secrets.ALI_DEPLOY_SSH_KEY }}
          # если ключ без пароля — уберите строку ниже:
          passphrase: ${{ secrets.ALI_DEPLOY_SSH_PASSPHRASE }}
          port: 22
          script: |
            set -euxo pipefail
            # swap на всякий случай, но npm тут почти не нужен
            if [ ! -f /swapfile ]; then
              sudo fallocate -l 2G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=2048
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
              sudo swapon -a
            fi

            # Разворачиваем артефакт в рабочую директорию и обновляем зависимости для runtime
            sudo -u myapp bash -s <<'REMOTE'
            set -euxo pipefail
            mkdir -p /srv/myapp/repo
            cd /srv/myapp/repo

            # резервная копия предыдущей версии (по желанию)
            mkdir -p ../releases
            ts="$(date -u +%Y%m%d%H%M%S)"
            if [ -d dist ]; then
              tar -czf ../releases/backup-$ts.tgz dist package*.json .env* 2>/dev/null || true
            fi

            # распаковываем новый артефакт
            tar -xzf /tmp/artifact.tgz -C .

            # ставим только prod-зависимости, если нужны (чаще всего на Nest в dist уже всё готово)
            if [ -f package-lock.json ]; then
              npm ci --omit=dev --no-audit --no-fund
            else
              npm install --omit=dev --no-audit --no-fund
            fi

            echo "sha=${GITHUB_SHA} time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" > .deploy_info

            if pm2 describe myapp-api >/dev/null 2>&1; then
              pm2 restart myapp-api --update-env
            else
              pm2 start "npm -- start" --name myapp-api --time
            fi
            pm2 save
            echo "ALIBABA ARTIFACT DEPLOYED $(cat .deploy_info)"
            REMOTE

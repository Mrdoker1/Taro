import { Injectable, Logger } from '@nestjs/common';
import { Resend } from 'resend';
import { loadTemplate } from './template-loader';

@Injectable()
export class MailService {
  private readonly logger = new Logger(MailService.name);
  private resend: Resend;

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Resend —Å API –∫–ª—é—á–æ–º
    const apiKey = process.env.RESEND_API_KEY;
    if (!apiKey) {
      this.logger.error('RESEND_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      throw new Error('RESEND_API_KEY required');
    }
    this.resend = new Resend(apiKey);
    this.logger.log('Resend —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  async sendConfirmationEmail(userEmail: string, userId: string) {
    const confirmationUrl = `${process.env.FRONTEND_URL || 'https://taroapi.uno'}/auth/confirm/${userId}`;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML-—à–∞–±–ª–æ–Ω
    const html = await loadTemplate('confirmation', { confirmationUrl });

    try {
      const { data, error } = await this.resend.emails.send({
        from: process.env.MAIL_FROM || 'Taro API <noreply@taroapi.uno>',
        to: [userEmail],
        subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email - Taro API',
        html,
      });

      if (error) {
        this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞');
      }

      this.logger.log(
        `Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${userEmail}, ID: ${data?.id}`,
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
  async sendPasswordResetEmail(
    userEmail: string,
    username: string,
    resetUrl: string,
    appName: string,
  ) {
    this.logger.log(
      `–û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞: ${userEmail} –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${appName}`,
    );

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML-—à–∞–±–ª–æ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
      const html = await loadTemplate('password-reset', {
        username,
        resetUrl,
        appName,
        validUntil: new Date(Date.now() + 15 * 60 * 1000).toLocaleString(
          'ru-RU',
        ),
      });

      const { data, error } = await this.resend.emails.send({
        from: process.env.MAIL_FROM || 'Viachas Kul <noreply@taroapi.uno>',
        to: [userEmail],
        subject: `üîê Password Reset - ${appName}`,
        html,
      });

      if (error) {
        this.logger.error('–û—à–∏–±–∫–∞ Resend API:', error);
        throw new Error(`–û—à–∏–±–∫–∞ Resend: ${error.message}`);
      }

      this.logger.log(
        `Email —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${userEmail}, ID: ${data?.id}`,
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error.message);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
    }
  }
}
